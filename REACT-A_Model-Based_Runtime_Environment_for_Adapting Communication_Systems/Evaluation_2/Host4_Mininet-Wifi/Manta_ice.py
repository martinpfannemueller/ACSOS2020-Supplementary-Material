# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `Manta.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Manta
_M_Manta = Ice.openModule('Manta')
__name__ = 'Manta'

# Start of module Manta.Effecting
_M_Manta.Effecting = Ice.openModule('Manta.Effecting')
__name__ = 'Manta.Effecting'

if 'Parameter' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting.Parameter = Ice.createTempClass()
    class Parameter(object):
        def __init__(self, key='', value=''):
            self.key = key
            self.value = value

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.key)
            _h = 5 * _h + Ice.getHash(self.value)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Manta.Effecting.Parameter):
                return NotImplemented
            else:
                if self.key is None or other.key is None:
                    if self.key != other.key:
                        return (-1 if self.key is None else 1)
                else:
                    if self.key < other.key:
                        return -1
                    elif self.key > other.key:
                        return 1
                if self.value is None or other.value is None:
                    if self.value != other.value:
                        return (-1 if self.value is None else 1)
                else:
                    if self.value < other.value:
                        return -1
                    elif self.value > other.value:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Effecting._t_Parameter)

        __repr__ = __str__

    _M_Manta.Effecting._t_Parameter = IcePy.defineStruct('::Manta::Effecting::Parameter', Parameter, (), (
        ('key', (), IcePy._t_string),
        ('value', (), IcePy._t_string)
    ))

    _M_Manta.Effecting.Parameter = Parameter
    del Parameter

if '_t_parameters' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting._t_parameters = IcePy.defineSequence('::Manta::Effecting::parameters', (), _M_Manta.Effecting._t_Parameter)

if 'Component' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting.Component = Ice.createTempClass()
    class Component(object):
        def __init__(self, className='', parameters=None):
            self.className = className
            self.parameters = parameters

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.className)
            if self.parameters:
                for _i0 in self.parameters:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Manta.Effecting.Component):
                return NotImplemented
            else:
                if self.className is None or other.className is None:
                    if self.className != other.className:
                        return (-1 if self.className is None else 1)
                else:
                    if self.className < other.className:
                        return -1
                    elif self.className > other.className:
                        return 1
                if self.parameters is None or other.parameters is None:
                    if self.parameters != other.parameters:
                        return (-1 if self.parameters is None else 1)
                else:
                    if self.parameters < other.parameters:
                        return -1
                    elif self.parameters > other.parameters:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Effecting._t_Component)

        __repr__ = __str__

    _M_Manta.Effecting._t_Component = IcePy.defineStruct('::Manta::Effecting::Component', Component, (), (
        ('className', (), IcePy._t_string),
        ('parameters', (), _M_Manta.Effecting._t_parameters)
    ))

    _M_Manta.Effecting.Component = Component
    del Component

if '_t_components' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting._t_components = IcePy.defineSequence('::Manta::Effecting::components', (), _M_Manta.Effecting._t_Component)

if 'ParameterChange' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting.ParameterChange = Ice.createTempClass()
    class ParameterChange(object):
        def __init__(self, parameter=Ice._struct_marker):
            if parameter is Ice._struct_marker:
                self.parameter = _M_Manta.Effecting.Parameter()
            else:
                self.parameter = parameter

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.parameter)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Manta.Effecting.ParameterChange):
                return NotImplemented
            else:
                if self.parameter is None or other.parameter is None:
                    if self.parameter != other.parameter:
                        return (-1 if self.parameter is None else 1)
                else:
                    if self.parameter < other.parameter:
                        return -1
                    elif self.parameter > other.parameter:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Effecting._t_ParameterChange)

        __repr__ = __str__

    _M_Manta.Effecting._t_ParameterChange = IcePy.defineStruct('::Manta::Effecting::ParameterChange', ParameterChange, (), (('parameter', (), _M_Manta.Effecting._t_Parameter),))

    _M_Manta.Effecting.ParameterChange = ParameterChange
    del ParameterChange

if 'ComponentChange' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting.ComponentChange = Ice.createTempClass()
    class ComponentChange(object):
        def __init__(self, components=None):
            self.components = components

        def __hash__(self):
            _h = 0
            if self.components:
                for _i0 in self.components:
                    _h = 5 * _h + Ice.getHash(_i0)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Manta.Effecting.ComponentChange):
                return NotImplemented
            else:
                if self.components is None or other.components is None:
                    if self.components != other.components:
                        return (-1 if self.components is None else 1)
                else:
                    if self.components < other.components:
                        return -1
                    elif self.components > other.components:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Effecting._t_ComponentChange)

        __repr__ = __str__

    _M_Manta.Effecting._t_ComponentChange = IcePy.defineStruct('::Manta::Effecting::ComponentChange', ComponentChange, (), (('components', (), _M_Manta.Effecting._t_components),))

    _M_Manta.Effecting.ComponentChange = ComponentChange
    del ComponentChange

_M_Manta.Effecting._t_ManagedResource = IcePy.defineValue('::Manta::Effecting::ManagedResource', Ice.Value, -1, (), False, True, None, ())

if 'ManagedResourcePrx' not in _M_Manta.Effecting.__dict__:
    _M_Manta.Effecting.ManagedResourcePrx = Ice.createTempClass()
    class ManagedResourcePrx(Ice.ObjectPrx):

        def sendParameterChanges(self, parameters, context=None):
            return _M_Manta.Effecting.ManagedResource._op_sendParameterChanges.invoke(self, ((parameters, ), context))

        def sendParameterChangesAsync(self, parameters, context=None):
            return _M_Manta.Effecting.ManagedResource._op_sendParameterChanges.invokeAsync(self, ((parameters, ), context))

        def begin_sendParameterChanges(self, parameters, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Effecting.ManagedResource._op_sendParameterChanges.begin(self, ((parameters, ), _response, _ex, _sent, context))

        def end_sendParameterChanges(self, _r):
            return _M_Manta.Effecting.ManagedResource._op_sendParameterChanges.end(self, _r)

        def sendComponentChanges(self, components, context=None):
            return _M_Manta.Effecting.ManagedResource._op_sendComponentChanges.invoke(self, ((components, ), context))

        def sendComponentChangesAsync(self, components, context=None):
            return _M_Manta.Effecting.ManagedResource._op_sendComponentChanges.invokeAsync(self, ((components, ), context))

        def begin_sendComponentChanges(self, components, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Effecting.ManagedResource._op_sendComponentChanges.begin(self, ((components, ), _response, _ex, _sent, context))

        def end_sendComponentChanges(self, _r):
            return _M_Manta.Effecting.ManagedResource._op_sendComponentChanges.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Manta.Effecting.ManagedResourcePrx.ice_checkedCast(proxy, '::Manta::Effecting::ManagedResource', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Manta.Effecting.ManagedResourcePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Manta::Effecting::ManagedResource'
    _M_Manta.Effecting._t_ManagedResourcePrx = IcePy.defineProxy('::Manta::Effecting::ManagedResource', ManagedResourcePrx)

    _M_Manta.Effecting.ManagedResourcePrx = ManagedResourcePrx
    del ManagedResourcePrx

    _M_Manta.Effecting.ManagedResource = Ice.createTempClass()
    class ManagedResource(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Manta::Effecting::ManagedResource')

        def ice_id(self, current=None):
            return '::Manta::Effecting::ManagedResource'

        @staticmethod
        def ice_staticId():
            return '::Manta::Effecting::ManagedResource'

        def sendParameterChanges(self, parameters, current=None):
            raise NotImplementedError("servant method 'sendParameterChanges' not implemented")

        def sendComponentChanges(self, components, current=None):
            raise NotImplementedError("servant method 'sendComponentChanges' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Effecting._t_ManagedResourceDisp)

        __repr__ = __str__

    _M_Manta.Effecting._t_ManagedResourceDisp = IcePy.defineClass('::Manta::Effecting::ManagedResource', ManagedResource, (), None, ())
    ManagedResource._ice_type = _M_Manta.Effecting._t_ManagedResourceDisp

    ManagedResource._op_sendParameterChanges = IcePy.Operation('sendParameterChanges', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Manta.Effecting._t_ParameterChange, False, 0),), (), None, ())
    ManagedResource._op_sendComponentChanges = IcePy.Operation('sendComponentChanges', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Manta.Effecting._t_ComponentChange, False, 0),), (), None, ())

    _M_Manta.Effecting.ManagedResource = ManagedResource
    del ManagedResource

# End of module Manta.Effecting

__name__ = 'Manta'

# Start of module Manta.MAPECommunication
_M_Manta.MAPECommunication = Ice.openModule('Manta.MAPECommunication')
__name__ = 'Manta.MAPECommunication'

if '_t_ParameterChanges' not in _M_Manta.MAPECommunication.__dict__:
    _M_Manta.MAPECommunication._t_ParameterChanges = IcePy.defineSequence('::Manta::MAPECommunication::ParameterChanges', (), _M_Manta.Effecting._t_Parameter)

if 'KnowledgeRecord' not in _M_Manta.MAPECommunication.__dict__:
    _M_Manta.MAPECommunication.KnowledgeRecord = Ice.createTempClass()
    class KnowledgeRecord(Ice.Value):
        def __init__(self, type='', category='', ownerID='', timeStamp=0):
            self.type = type
            self.category = category
            self.ownerID = ownerID
            self.timeStamp = timeStamp

        def ice_id(self):
            return '::Manta::MAPECommunication::KnowledgeRecord'

        @staticmethod
        def ice_staticId():
            return '::Manta::MAPECommunication::KnowledgeRecord'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.MAPECommunication._t_KnowledgeRecord)

        __repr__ = __str__

    _M_Manta.MAPECommunication._t_KnowledgeRecord = IcePy.defineValue('::Manta::MAPECommunication::KnowledgeRecord', KnowledgeRecord, -1, (), False, False, None, (
        ('type', (), IcePy._t_string, False, 0),
        ('category', (), IcePy._t_string, False, 0),
        ('ownerID', (), IcePy._t_string, False, 0),
        ('timeStamp', (), IcePy._t_long, False, 0)
    ))
    KnowledgeRecord._ice_type = _M_Manta.MAPECommunication._t_KnowledgeRecord

    _M_Manta.MAPECommunication.KnowledgeRecord = KnowledgeRecord
    del KnowledgeRecord

if 'StringKnowledgeRecord' not in _M_Manta.MAPECommunication.__dict__:
    _M_Manta.MAPECommunication.StringKnowledgeRecord = Ice.createTempClass()
    class StringKnowledgeRecord(_M_Manta.MAPECommunication.KnowledgeRecord):
        def __init__(self, type='', category='', ownerID='', timeStamp=0, data=''):
            _M_Manta.MAPECommunication.KnowledgeRecord.__init__(self, type, category, ownerID, timeStamp)
            self.data = data

        def ice_id(self):
            return '::Manta::MAPECommunication::StringKnowledgeRecord'

        @staticmethod
        def ice_staticId():
            return '::Manta::MAPECommunication::StringKnowledgeRecord'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.MAPECommunication._t_StringKnowledgeRecord)

        __repr__ = __str__

    _M_Manta.MAPECommunication._t_StringKnowledgeRecord = IcePy.defineValue('::Manta::MAPECommunication::StringKnowledgeRecord', StringKnowledgeRecord, -1, (), False, False, _M_Manta.MAPECommunication._t_KnowledgeRecord, (('data', (), IcePy._t_string, False, 0),))
    StringKnowledgeRecord._ice_type = _M_Manta.MAPECommunication._t_StringKnowledgeRecord

    _M_Manta.MAPECommunication.StringKnowledgeRecord = StringKnowledgeRecord
    del StringKnowledgeRecord

if 'EffectingKnowledgeRecord' not in _M_Manta.MAPECommunication.__dict__:
    _M_Manta.MAPECommunication.EffectingKnowledgeRecord = Ice.createTempClass()
    class EffectingKnowledgeRecord(_M_Manta.MAPECommunication.KnowledgeRecord):
        def __init__(self, type='', category='', ownerID='', timeStamp=0, components=Ice._struct_marker, parameterChanges=None):
            _M_Manta.MAPECommunication.KnowledgeRecord.__init__(self, type, category, ownerID, timeStamp)
            if components is Ice._struct_marker:
                self.components = _M_Manta.Effecting.ComponentChange()
            else:
                self.components = components
            self.parameterChanges = parameterChanges

        def ice_id(self):
            return '::Manta::MAPECommunication::EffectingKnowledgeRecord'

        @staticmethod
        def ice_staticId():
            return '::Manta::MAPECommunication::EffectingKnowledgeRecord'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.MAPECommunication._t_EffectingKnowledgeRecord)

        __repr__ = __str__

    _M_Manta.MAPECommunication._t_EffectingKnowledgeRecord = IcePy.defineValue('::Manta::MAPECommunication::EffectingKnowledgeRecord', EffectingKnowledgeRecord, -1, (), False, False, _M_Manta.MAPECommunication._t_KnowledgeRecord, (
        ('components', (), _M_Manta.Effecting._t_ComponentChange, False, 0),
        ('parameterChanges', (), _M_Manta.MAPECommunication._t_ParameterChanges, False, 0)
    ))
    EffectingKnowledgeRecord._ice_type = _M_Manta.MAPECommunication._t_EffectingKnowledgeRecord

    _M_Manta.MAPECommunication.EffectingKnowledgeRecord = EffectingKnowledgeRecord
    del EffectingKnowledgeRecord

_M_Manta.MAPECommunication._t_IALElement = IcePy.defineValue('::Manta::MAPECommunication::IALElement', Ice.Value, -1, (), False, True, None, ())

if 'IALElementPrx' not in _M_Manta.MAPECommunication.__dict__:
    _M_Manta.MAPECommunication.IALElementPrx = Ice.createTempClass()
    class IALElementPrx(Ice.ObjectPrx):

        def callLogic(self, knowledgeRecord, context=None):
            return _M_Manta.MAPECommunication.IALElement._op_callLogic.invoke(self, ((knowledgeRecord, ), context))

        def callLogicAsync(self, knowledgeRecord, context=None):
            return _M_Manta.MAPECommunication.IALElement._op_callLogic.invokeAsync(self, ((knowledgeRecord, ), context))

        def begin_callLogic(self, knowledgeRecord, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.MAPECommunication.IALElement._op_callLogic.begin(self, ((knowledgeRecord, ), _response, _ex, _sent, context))

        def end_callLogic(self, _r):
            return _M_Manta.MAPECommunication.IALElement._op_callLogic.end(self, _r)

        def setSuccessor(self, successorString, context=None):
            return _M_Manta.MAPECommunication.IALElement._op_setSuccessor.invoke(self, ((successorString, ), context))

        def setSuccessorAsync(self, successorString, context=None):
            return _M_Manta.MAPECommunication.IALElement._op_setSuccessor.invokeAsync(self, ((successorString, ), context))

        def begin_setSuccessor(self, successorString, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.MAPECommunication.IALElement._op_setSuccessor.begin(self, ((successorString, ), _response, _ex, _sent, context))

        def end_setSuccessor(self, _r):
            return _M_Manta.MAPECommunication.IALElement._op_setSuccessor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Manta.MAPECommunication.IALElementPrx.ice_checkedCast(proxy, '::Manta::MAPECommunication::IALElement', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Manta.MAPECommunication.IALElementPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Manta::MAPECommunication::IALElement'
    _M_Manta.MAPECommunication._t_IALElementPrx = IcePy.defineProxy('::Manta::MAPECommunication::IALElement', IALElementPrx)

    _M_Manta.MAPECommunication.IALElementPrx = IALElementPrx
    del IALElementPrx

    _M_Manta.MAPECommunication.IALElement = Ice.createTempClass()
    class IALElement(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Manta::MAPECommunication::IALElement')

        def ice_id(self, current=None):
            return '::Manta::MAPECommunication::IALElement'

        @staticmethod
        def ice_staticId():
            return '::Manta::MAPECommunication::IALElement'

        def callLogic(self, knowledgeRecord, current=None):
            raise NotImplementedError("servant method 'callLogic' not implemented")

        def setSuccessor(self, successorString, current=None):
            raise NotImplementedError("servant method 'setSuccessor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.MAPECommunication._t_IALElementDisp)

        __repr__ = __str__

    _M_Manta.MAPECommunication._t_IALElementDisp = IcePy.defineClass('::Manta::MAPECommunication::IALElement', IALElement, (), None, ())
    IALElement._ice_type = _M_Manta.MAPECommunication._t_IALElementDisp

    IALElement._op_callLogic = IcePy.Operation('callLogic', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Manta.MAPECommunication._t_KnowledgeRecord, False, 0),), (), None, ())
    IALElement._op_setSuccessor = IcePy.Operation('setSuccessor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Manta.MAPECommunication.IALElement = IALElement
    del IALElement

# End of module Manta.MAPECommunication

__name__ = 'Manta'

# Start of module Manta.Knowledge
_M_Manta.Knowledge = Ice.openModule('Manta.Knowledge')
__name__ = 'Manta.Knowledge'

if 'KnowledgePart' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.KnowledgePart = Ice.createTempClass()
    class KnowledgePart(Ice.Value):
        def __init__(self, value=''):
            self.value = value

        def ice_id(self):
            return '::Manta::Knowledge::KnowledgePart'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::KnowledgePart'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_KnowledgePart)

        __repr__ = __str__

    _M_Manta.Knowledge._t_KnowledgePart = IcePy.defineValue('::Manta::Knowledge::KnowledgePart', KnowledgePart, -1, (), False, False, None, (('value', (), IcePy._t_string, False, 0),))
    KnowledgePart._ice_type = _M_Manta.Knowledge._t_KnowledgePart

    _M_Manta.Knowledge.KnowledgePart = KnowledgePart
    del KnowledgePart

if 'FMKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.FMKnowledge = Ice.createTempClass()
    class FMKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::FMKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::FMKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_FMKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_FMKnowledge = IcePy.defineValue('::Manta::Knowledge::FMKnowledge', FMKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    FMKnowledge._ice_type = _M_Manta.Knowledge._t_FMKnowledge

    _M_Manta.Knowledge.FMKnowledge = FMKnowledge
    del FMKnowledge

if 'MappingKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.MappingKnowledge = Ice.createTempClass()
    class MappingKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::MappingKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::MappingKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_MappingKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_MappingKnowledge = IcePy.defineValue('::Manta::Knowledge::MappingKnowledge', MappingKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    MappingKnowledge._ice_type = _M_Manta.Knowledge._t_MappingKnowledge

    _M_Manta.Knowledge.MappingKnowledge = MappingKnowledge
    del MappingKnowledge

if 'CMKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.CMKnowledge = Ice.createTempClass()
    class CMKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::CMKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::CMKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_CMKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_CMKnowledge = IcePy.defineValue('::Manta::Knowledge::CMKnowledge', CMKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    CMKnowledge._ice_type = _M_Manta.Knowledge._t_CMKnowledge

    _M_Manta.Knowledge.CMKnowledge = CMKnowledge
    del CMKnowledge

if 'MetricKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.MetricKnowledge = Ice.createTempClass()
    class MetricKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::MetricKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::MetricKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_MetricKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_MetricKnowledge = IcePy.defineValue('::Manta::Knowledge::MetricKnowledge', MetricKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    MetricKnowledge._ice_type = _M_Manta.Knowledge._t_MetricKnowledge

    _M_Manta.Knowledge.MetricKnowledge = MetricKnowledge
    del MetricKnowledge

if 'PIMKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.PIMKnowledge = Ice.createTempClass()
    class PIMKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::PIMKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::PIMKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_PIMKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_PIMKnowledge = IcePy.defineValue('::Manta::Knowledge::PIMKnowledge', PIMKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    PIMKnowledge._ice_type = _M_Manta.Knowledge._t_PIMKnowledge

    _M_Manta.Knowledge.PIMKnowledge = PIMKnowledge
    del PIMKnowledge

if 'ScalingKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.ScalingKnowledge = Ice.createTempClass()
    class ScalingKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::ScalingKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::ScalingKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_ScalingKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_ScalingKnowledge = IcePy.defineValue('::Manta::Knowledge::ScalingKnowledge', ScalingKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    ScalingKnowledge._ice_type = _M_Manta.Knowledge._t_ScalingKnowledge

    _M_Manta.Knowledge.ScalingKnowledge = ScalingKnowledge
    del ScalingKnowledge

if 'ClaferKnowledge' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.ClaferKnowledge = Ice.createTempClass()
    class ClaferKnowledge(_M_Manta.Knowledge.KnowledgePart):
        def __init__(self, value=''):
            _M_Manta.Knowledge.KnowledgePart.__init__(self, value)

        def ice_id(self):
            return '::Manta::Knowledge::ClaferKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::ClaferKnowledge'

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_ClaferKnowledge)

        __repr__ = __str__

    _M_Manta.Knowledge._t_ClaferKnowledge = IcePy.defineValue('::Manta::Knowledge::ClaferKnowledge', ClaferKnowledge, -1, (), False, False, _M_Manta.Knowledge._t_KnowledgePart, ())
    ClaferKnowledge._ice_type = _M_Manta.Knowledge._t_ClaferKnowledge

    _M_Manta.Knowledge.ClaferKnowledge = ClaferKnowledge
    del ClaferKnowledge

_M_Manta.Knowledge._t_IKnowledge = IcePy.defineValue('::Manta::Knowledge::IKnowledge', Ice.Value, -1, (), False, True, None, ())

if 'IKnowledgePrx' not in _M_Manta.Knowledge.__dict__:
    _M_Manta.Knowledge.IKnowledgePrx = Ice.createTempClass()
    class IKnowledgePrx(Ice.ObjectPrx):

        def sendKnowledge(self, knowledge, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_sendKnowledge.invoke(self, ((knowledge, ), context))

        def sendKnowledgeAsync(self, knowledge, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_sendKnowledge.invokeAsync(self, ((knowledge, ), context))

        def begin_sendKnowledge(self, knowledge, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_sendKnowledge.begin(self, ((knowledge, ), _response, _ex, _sent, context))

        def end_sendKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_sendKnowledge.end(self, _r)

        def getFMKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getFMKnowledge.invoke(self, ((), context))

        def getFMKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getFMKnowledge.invokeAsync(self, ((), context))

        def begin_getFMKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getFMKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getFMKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getFMKnowledge.end(self, _r)

        def getMappingKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getMappingKnowledge.invoke(self, ((), context))

        def getMappingKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getMappingKnowledge.invokeAsync(self, ((), context))

        def begin_getMappingKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getMappingKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getMappingKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getMappingKnowledge.end(self, _r)

        def getCMKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getCMKnowledge.invoke(self, ((), context))

        def getCMKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getCMKnowledge.invokeAsync(self, ((), context))

        def begin_getCMKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getCMKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getCMKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getCMKnowledge.end(self, _r)

        def getMetricKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getMetricKnowledge.invoke(self, ((), context))

        def getMetricKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getMetricKnowledge.invokeAsync(self, ((), context))

        def begin_getMetricKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getMetricKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getMetricKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getMetricKnowledge.end(self, _r)

        def getPIMKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getPIMKnowledge.invoke(self, ((), context))

        def getPIMKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getPIMKnowledge.invokeAsync(self, ((), context))

        def begin_getPIMKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getPIMKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getPIMKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getPIMKnowledge.end(self, _r)

        def getScalingKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getScalingKnowledge.invoke(self, ((), context))

        def getScalingKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getScalingKnowledge.invokeAsync(self, ((), context))

        def begin_getScalingKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getScalingKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getScalingKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getScalingKnowledge.end(self, _r)

        def getClaferKnowledge(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getClaferKnowledge.invoke(self, ((), context))

        def getClaferKnowledgeAsync(self, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getClaferKnowledge.invokeAsync(self, ((), context))

        def begin_getClaferKnowledge(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Knowledge.IKnowledge._op_getClaferKnowledge.begin(self, ((), _response, _ex, _sent, context))

        def end_getClaferKnowledge(self, _r):
            return _M_Manta.Knowledge.IKnowledge._op_getClaferKnowledge.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Manta.Knowledge.IKnowledgePrx.ice_checkedCast(proxy, '::Manta::Knowledge::IKnowledge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Manta.Knowledge.IKnowledgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::IKnowledge'
    _M_Manta.Knowledge._t_IKnowledgePrx = IcePy.defineProxy('::Manta::Knowledge::IKnowledge', IKnowledgePrx)

    _M_Manta.Knowledge.IKnowledgePrx = IKnowledgePrx
    del IKnowledgePrx

    _M_Manta.Knowledge.IKnowledge = Ice.createTempClass()
    class IKnowledge(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Manta::Knowledge::IKnowledge')

        def ice_id(self, current=None):
            return '::Manta::Knowledge::IKnowledge'

        @staticmethod
        def ice_staticId():
            return '::Manta::Knowledge::IKnowledge'

        def sendKnowledge(self, knowledge, current=None):
            raise NotImplementedError("servant method 'sendKnowledge' not implemented")

        def getFMKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getFMKnowledge' not implemented")

        def getMappingKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getMappingKnowledge' not implemented")

        def getCMKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getCMKnowledge' not implemented")

        def getMetricKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getMetricKnowledge' not implemented")

        def getPIMKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getPIMKnowledge' not implemented")

        def getScalingKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getScalingKnowledge' not implemented")

        def getClaferKnowledge(self, current=None):
            raise NotImplementedError("servant method 'getClaferKnowledge' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Knowledge._t_IKnowledgeDisp)

        __repr__ = __str__

    _M_Manta.Knowledge._t_IKnowledgeDisp = IcePy.defineClass('::Manta::Knowledge::IKnowledge', IKnowledge, (), None, ())
    IKnowledge._ice_type = _M_Manta.Knowledge._t_IKnowledgeDisp

    IKnowledge._op_sendKnowledge = IcePy.Operation('sendKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Manta.Knowledge._t_KnowledgePart, False, 0),), (), None, ())
    IKnowledge._op_getFMKnowledge = IcePy.Operation('getFMKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_FMKnowledge, False, 0), ())
    IKnowledge._op_getMappingKnowledge = IcePy.Operation('getMappingKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_MappingKnowledge, False, 0), ())
    IKnowledge._op_getCMKnowledge = IcePy.Operation('getCMKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_CMKnowledge, False, 0), ())
    IKnowledge._op_getMetricKnowledge = IcePy.Operation('getMetricKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_MetricKnowledge, False, 0), ())
    IKnowledge._op_getPIMKnowledge = IcePy.Operation('getPIMKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_PIMKnowledge, False, 0), ())
    IKnowledge._op_getScalingKnowledge = IcePy.Operation('getScalingKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_ScalingKnowledge, False, 0), ())
    IKnowledge._op_getClaferKnowledge = IcePy.Operation('getClaferKnowledge', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Manta.Knowledge._t_ClaferKnowledge, False, 0), ())

    _M_Manta.Knowledge.IKnowledge = IKnowledge
    del IKnowledge

# End of module Manta.Knowledge

__name__ = 'Manta'

# Start of module Manta.Sensing
_M_Manta.Sensing = Ice.openModule('Manta.Sensing')
__name__ = 'Manta.Sensing'

_M_Manta.Sensing._t_ISensor = IcePy.defineValue('::Manta::Sensing::ISensor', Ice.Value, -1, (), False, True, None, ())

if 'ISensorPrx' not in _M_Manta.Sensing.__dict__:
    _M_Manta.Sensing.ISensorPrx = Ice.createTempClass()
    class ISensorPrx(Ice.ObjectPrx):

        def receiveSensorData(self, sensorData, context=None):
            return _M_Manta.Sensing.ISensor._op_receiveSensorData.invoke(self, ((sensorData, ), context))

        def receiveSensorDataAsync(self, sensorData, context=None):
            return _M_Manta.Sensing.ISensor._op_receiveSensorData.invokeAsync(self, ((sensorData, ), context))

        def begin_receiveSensorData(self, sensorData, _response=None, _ex=None, _sent=None, context=None):
            return _M_Manta.Sensing.ISensor._op_receiveSensorData.begin(self, ((sensorData, ), _response, _ex, _sent, context))

        def end_receiveSensorData(self, _r):
            return _M_Manta.Sensing.ISensor._op_receiveSensorData.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Manta.Sensing.ISensorPrx.ice_checkedCast(proxy, '::Manta::Sensing::ISensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Manta.Sensing.ISensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Manta::Sensing::ISensor'
    _M_Manta.Sensing._t_ISensorPrx = IcePy.defineProxy('::Manta::Sensing::ISensor', ISensorPrx)

    _M_Manta.Sensing.ISensorPrx = ISensorPrx
    del ISensorPrx

    _M_Manta.Sensing.ISensor = Ice.createTempClass()
    class ISensor(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Manta::Sensing::ISensor')

        def ice_id(self, current=None):
            return '::Manta::Sensing::ISensor'

        @staticmethod
        def ice_staticId():
            return '::Manta::Sensing::ISensor'

        def receiveSensorData(self, sensorData, current=None):
            raise NotImplementedError("servant method 'receiveSensorData' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Manta.Sensing._t_ISensorDisp)

        __repr__ = __str__

    _M_Manta.Sensing._t_ISensorDisp = IcePy.defineClass('::Manta::Sensing::ISensor', ISensor, (), None, ())
    ISensor._ice_type = _M_Manta.Sensing._t_ISensorDisp

    ISensor._op_receiveSensorData = IcePy.Operation('receiveSensorData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Manta.Sensing.ISensor = ISensor
    del ISensor

# End of module Manta.Sensing

__name__ = 'Manta'

# End of module Manta
